---
layout: post
title:  Пример использования Ansible для выката веб-приложений
date:   2015-03-22 18:43:22
categories: tools
---

[Ansible] --- популярная система для управления конфигурацией, а также развертывания приложений. Однако, в 
официальной документации есть, пожалуй, только один хорошо описанный сценарий развертывания --- rolling update. 
В этой статье я опишу альтернативный сценарий развертывания приложения с помошью [Ansible].


Предыстория
-----------

Развертывание или "выкат" веб-приложения --- задача, которой мне приходится часто заниматься на протяжении
последних 10 лет. Удобная и надежная процедура выката позволяет съэкономить массу времени и нервов. Вот список требований, которые обычно предъявляются к процедуре и инструментам для выката:

* Процедура выката должна быть надежной --- необходимо минимизировать риск того, что из-за ошибок в ходе выката 
приложение окажется в некорректном состояни.
* Желательно, чтобы выкат происходил без перебоев в работе веб-приложения (без даунтайма).
* Наконец, очень важно, чтобы выкат происходил быстро --- выкатывать версии иногда приходится 
по нескольку раз в день.

Пожалуй, самый простой метод выката --- заходим на сервер и выполняем команду `git pull` --- не вполне отвечает
перечисленным выше требованиям. Обычно обновление исходников лишь один из этапов выката: необходимо создать 
нужные каталоги, выставить права доступа, внести изменения в конфиги, накатить миграции схемы данных, 
собрать статику (css, js) и т.п. К тому же, обновлять исходники прямо в рабочем каталоге опасно: 
что если обновление рабочего каталога завершится с ошибкой? 

Несколько лет назад, работая над большим PHP веб-приложением, наша команда выбрала способ выката, 
который известен как rolling update. Вкратце, суть метода состоит в том, что приложение обновляется 
на одном или нескольких серверах, которые предварительно исключаются из "раздачи" на балансировщике 
нагрузки. Затем обновленные сервера возвращаются в раздачу и обновление продолжается на других серверах. 
Мы использовали сервис AWS EC2 для запуска новых серверов и сервис AWS ELB в качестве балансировщика нагрузки.

Два года назад, придя в компанию РБК, я познакомился с более простым, но весьма эффективным способом выката, 
с использованием символических ссылок. Суть метода состоит в том, что приложение устанавливается на каждом
сервере в отдельный новый каталог, там настраивается, и затем, когда все подготовительные этапы успешно
выполнены, выполняется практически одновременное переключение всех серверов на новую версию путем 
изменения символических ссылок. 

Для автоматизации процедуры выката в компании использовался ant и, позднее, замечательный 
автосборщик [Haru], основанный на [Phing]. [Haru] имеет множество преимуществ: гибкий механизм
описания конфигурации приложения, легко устанавливается и расширяется. Автосборщик настолько удобный, что
используется для выката не только PHP, но и Python приложений. 

[Haru] умеет выкатывать приложение на один сервер (команда `install`), а также на несколько серверов 
(команда `installall`), однако делает это последовательно, что увеличивает время выката при большом
количестве серверов. [Ansible], напротив, задуман для параллельного выполнения задач на множестве серверов.


Критерии выбора конфигурации
----------------------------

Описание конфигурации
---------------------



Ссылки
------

[Ansible]:  https://www.ansible.com/
[Haru]:     http://theratg.github.io/haru/
[phing]:    http://www.phing.info/
